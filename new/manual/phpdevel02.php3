<?php 
require('shared-manual.inc'); 
setupNavigation(array(
  'home' => array('manual.php3', 'PHP3 Manual'),
  'prev' => array('phpdevel.php3', 'PHP development'),
  'next' => array('phpdevel03.php3', 'Hitchhiker\'s guide to PHP internals'),
  'up'   => array('phpdevel.php3', 'PHP development'),
  'toc'  => array(
    array('phpdevel.php3#I(PHPDEVEL)C(1,TITLE)', ''),
    array('phpdevel.php3#I(PHPDEVEL)C(1,SECT1)', 'Adding functions to PHP3'),
    array('phpdevel02.php3', 'Reporting Errors'),
    array('phpdevel03.php3', 'Hitchhiker\'s guide to PHP internals'))));
manualHeader('Reporting Errors');
?><H1
><A
NAME="I(PHPDEVEL)C(2,SECT1)"
>Reporting Errors</A
></H1
><P
>   To report errors from an internal function, you should call the
   <B
CLASS="FUNCTION"
>php3_error()()</B
> function. This takes at least two
   parameters -- the first is the level of the error, the second is
   the format string for the error message (as in a standard
   <B
CLASS="FUNCTION"
>printf()()</B
> call), and any following arguments
   are the parameters for the format string. The error levels are:
  </P
><H2
><A
NAME="INTERNAL.E-NOTICE"
>E_NOTICE</A
></H2
><P
>    Notices are not printed by default, and indicate that the script
    encountered something that could indicate an error, but could also
    happen in the normal course of running a script. For example,
    trying to access the value of a variable which has not been set,
    or calling <A
HREF="function.stat.php3"
>stat()</A
> on a
    file that doesn't exist.
   </P
><H2
><A
NAME="INTERNAL.E-WARNING"
>E_WARNING</A
></H2
><P
>    Warnings are printed by default, but do not interrupt script
    execution.  These indicate a problem that should have been trapped
    by the script before the call was made. For example, calling <A
HREF="function.ereg.php3"
>ereg()</A
> with an invalid regular
    expression.
   </P
><H2
><A
NAME="I(PHPDEVEL)C(2,SECT1)(3,SECT2)"
>E_ERROR</A
></H2
><P
>    Errors are also printed by default, and execution of the script is
    halted after the function returns. These indicate errors that can
    not be recovered from, such as a memory allocation problem.
   </P
><H2
><A
NAME="I(PHPDEVEL)C(2,SECT1)(4,SECT2)"
>E_PARSE</A
></H2
><P
>    Parse errors should only be generated by the parser. The code is
    listed here only for the sake of completeness.
   </P
><?php manualFooter('Reporting Errors');?>